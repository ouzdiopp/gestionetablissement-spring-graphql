package sn.ouznoreyni.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CoursAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoursAllPropertiesEquals(Cours expected, Cours actual) {
        assertCoursAutoGeneratedPropertiesEquals(expected, actual);
        assertCoursAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoursAllUpdatablePropertiesEquals(Cours expected, Cours actual) {
        assertCoursUpdatableFieldsEquals(expected, actual);
        assertCoursUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoursAutoGeneratedPropertiesEquals(Cours expected, Cours actual) {
        assertThat(expected)
            .as("Verify Cours auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoursUpdatableFieldsEquals(Cours expected, Cours actual) {
        assertThat(expected)
            .as("Verify Cours relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getIntitule()).as("check intitule").isEqualTo(actual.getIntitule()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getCredits()).as("check credits").isEqualTo(actual.getCredits()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoursUpdatableRelationshipsEquals(Cours expected, Cours actual) {
        assertThat(expected)
            .as("Verify Cours relationships")
            .satisfies(e -> assertThat(e.getDepartement()).as("check departement").isEqualTo(actual.getDepartement()))
            .satisfies(e -> assertThat(e.getProfesseur()).as("check professeur").isEqualTo(actual.getProfesseur()))
            .satisfies(e -> assertThat(e.getEtudiants()).as("check etudiants").isEqualTo(actual.getEtudiants()));
    }
}
